{
  // предустановленные наборы глобальных переменных
  "env": {
    "node": true,
    "mocha": true,
    "jasmine": true,
    "es6": true
  },
  // настройки для правил
  "rules": {
    // все правила расположены в том же порядке как на сайте
    // подробнее о том что делают правила можно почитать по ссылке
    // http://eslint.org/docs/rules/

    // Possible Errors
    // The following rules point out areas where you might have made mistakes.

    // comma-dangle - disallow or enforce trailing commas
    // no-comma-dangle - (deprecated) disallow trailing commas in object literals (off by default)
    // no-cond-assign - disallow assignment in conditional expressions
    // no-console - disallow use of console (off by default in the node environment)
    // no-constant-condition - disallow use of constant expressions in conditions
    // no-control-regex - disallow control characters in regular expressions
    // no-debugger - disallow use of debugger
    // no-dupe-args - disallow duplicate arguments in functions
    "no-dupe-args": 2,
    // no-dupe-keys - disallow duplicate keys when creating object literals
    "no-dupe-keys": 2,
    // no-duplicate-case - disallow a duplicate case label.
    "no-duplicate-case": 2,
    // no-empty-character-class - disallow the use of empty character classes in regular expressions
    // no-empty-class - (deprecated) disallow the use of empty character classes in regular expressions (off by default)
    // no-empty - disallow empty statements
    "no-empty": 2,
    // no-ex-assign - disallow assigning to the exception in a catch block
    // no-extra-boolean-cast - disallow double-negation boolean casts in a boolean context
    // no-extra-parens - disallow unnecessary parentheses (off by default)
    // no-extra-semi - disallow unnecessary semicolons
    // no-func-assign - disallow overwriting functions written as function declarations
    "no-func-assign": 2,
    // no-inner-declarations - disallow function or variable declarations in nested blocks
    // no-invalid-regexp - disallow invalid regular expression strings in the RegExp constructor
    // no-irregular-whitespace - disallow irregular whitespace outside of strings and comments
    // no-negated-in-lhs - disallow negation of the left operand of an in expression
    "no-negated-in-lhs": 2,
    // no-obj-calls - disallow the use of object properties of the global object (Math and JSON) as functions
    "no-obj-calls": 2,
    // no-regex-spaces - disallow multiple spaces in a regular expression literal
    // no-reserved-keys - disallow reserved words being used as object literal keys (off by default)
    //"no-reserved-keys": 2,
    // no-sparse-arrays - disallow sparse arrays
    // no-unreachable - disallow unreachable statements after a return, throw, continue, or break statement
    "no-unreachable": 2,
    // use-isnan - disallow comparisons with the value NaN
    // valid-jsdoc - Ensure JSDoc comments are valid (off by default)
    // valid-typeof - Ensure that the results of typeof are compared against a valid string
    "valid-typeof": 2,
    // Best Practices
    // These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

    // accessor-pairs - Enforces getter/setter pairs in objects (off by default)
    // block-scoped-var - treat var statements as if they were block scoped (off by default)
    // complexity - specify the maximum cyclomatic complexity allowed in a program (off by default)
    // consistent-return - require return statements to either always or never specify values
    "consistent-return": 1,
    // curly - specify curly brace conventions for all control statements
    "curly": 1,
    // default-case - require default case in switch statements (off by default)
    "default-case": 1,
    // dot-notation - encourages use of dot notation whenever possible
    // dot-location - enforces consistent newlines before or after dots (off by default)
    // eqeqeq - require the use of === and !==
    // guard-for-in - make sure for-in loops have an if statement (off by default)
    // no-alert - disallow the use of alert, confirm, and prompt
    "no-alert": 0,
    // no-caller - disallow use of arguments.caller or arguments.callee
    // no-div-regex - disallow division operators explicitly at beginning of regular expression (off by default)
    // no-else-return - disallow else after a return in an if (off by default)
    // no-empty-label - disallow use of labels for anything other then loops and switches
    // no-eq-null - disallow comparisons to null without a type-checking operator (off by default)
    // no-eval - disallow use of eval()
    // no-extend-native - disallow adding to native types
    // no-extra-bind - disallow unnecessary function binding
    // no-fallthrough - disallow fallthrough of case statements
    // no-floating-decimal - disallow the use of leading or trailing decimal points in numeric literals (off by default)
    // no-implied-eval - disallow use of eval()-like methods
    // no-iterator - disallow usage of __iterator__ property
    // no-labels - disallow use of labeled statements
    // no-lone-blocks - disallow unnecessary nested blocks
    // no-loop-func - disallow creation of functions within loops
    // no-multi-spaces - disallow use of multiple spaces
    // no-multi-str - disallow use of multiline strings
    // no-native-reassign - disallow reassignments of native objects
    // no-new-func - disallow use of new operator for Function object
    // no-new-wrappers - disallows creating new instances of String,Number, and Boolean
    // no-new - disallow use of new operator when not part of the assignment or comparison
    // no-octal-escape - disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    // no-octal - disallow use of octal literals
    // no-param-reassign - disallow reassignment of function parameters (off by default)
    // no-process-env - disallow use of process.env (off by default)
    // no-proto - disallow usage of __proto__ property
    // no-redeclare - disallow declaring the same variable more than once
    // no-return-assign - disallow use of assignment in return statement
    // no-script-url - disallow use of javascript: urls.
    // no-self-compare - disallow comparisons where both sides are exactly the same (off by default)
    "no-self-compare": 2,
    // no-sequences - disallow use of comma operator
    // no-throw-literal - restrict what can be thrown as an exception (off by default)
    "no-throw-literal": 1,
    // no-unused-expressions - disallow usage of expressions in statement position
    "no-unused-expressions": 0,
    // no-void - disallow use of void operator (off by default)
    "no-void": 2,
    // no-warning-comments - disallow usage of configurable warning terms in comments - e.g. TODO or FIXME (off by default)
    // no-with - disallow use of the with statement
    // radix - require use of the second argument for parseInt() (off by default)
    // vars-on-top - requires to declare all vars on top of their containing scope (off by default)
    // wrap-iife - require immediate function invocation to be wrapped in parentheses (off by default)
    "wrap-iife": [
      2,
      "inside"
    ],
    // yoda - require or disallow Yoda conditions
    "yoda": 2,
    // Strict Mode
    // These rules relate to using strict mode.

    // global-strict - (deprecated) require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
    // no-extra-strict - (deprecated) disallow unnecessary use of "use strict"; when already in strict mode
    // strict - controls location of Use Strict Directives
    "strict": 0,
    // Variables
    // These rules have to do with variable declarations.

    // no-catch-shadow - disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-catch-shadow": 1,
    // no-delete-var - disallow deletion of variables
    "no-delete-var": 1,
    // no-label-var - disallow labels that share a name with a variable
    "no-label-var": 1,
    // no-shadow-restricted-names - disallow shadowing of names such as arguments
    "no-shadow-restricted-names": 2,
    // no-shadow - disallow declaration of variables already declared in the outer scope
    "no-shadow": 0,
    // no-undef-init - disallow use of undefined when initializing variables
    "no-undef-init": 2,
    // no-undef - disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef": 2,
    // no-undefined - disallow use of undefined variable (off by default)
    // no-unused-vars - disallow declaration of variables that are not used in the code
    "no-unused-vars": 2,
    // no-use-before-define - disallow use of variables before they are defined
    "no-use-before-define": [
      2,
      "nofunc"
    ],
    // Node.js
    // These rules are specific to JavaScript running on Node.js.

    // handle-callback-err - enforces error handling in callbacks (off by default) (on by default in the node environment)
    // no-mixed-requires - disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    // no-new-require - disallow use of new operator with the require function (off by default) (on by default in the node environment)
    // no-path-concat - disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    // no-process-exit - disallow process.exit() (on by default in the node environment)
    // no-restricted-modules - restrict usage of specified node modules (off by default)
    // no-sync - disallow use of synchronous methods (off by default)

    // Stylistic Issues
    // These rules are purely matters of style and are quite subjective.

    // brace-style - enforce one true brace style (off by default)
    // camelcase - require camel case names
    // выключено чтобы можно было писать dataObj.snake_case_prop когда работаем с api, а не dataObj["snake_case_prop"]
    // подробнее: http://eslint.org/docs/rules/dot-notation
    "camelcase": 0,
    // comma-spacing - enforce spacing before and after comma
    "comma-spacing": [
      2,
      {
        "before": false,
        "after": true
      }
    ],
    // comma-style - enforce one true comma style (off by default)
    "comma-style": [
      2,
      "last"
    ],
    // consistent-this - enforces consistent naming when capturing the current execution context (off by default)
    // eol-last - enforce newline at the end of file, with no multiple empty lines
    "eol-last": 2,
    // func-names - require function expressions to have a name (off by default)
    // func-style - enforces use of function declarations or expressions (off by default)
    "func-style": [
      2,
      "declaration"
    ],
    // indent - this option sets a specific tab width for your code (off by default)
    "indent": [
      2,
      2
    ],
    // key-spacing - enforces spacing between keys and values in object literal properties
    "key-spacing": [
      2,
      {
        "beforeColon": false,
        "afterColon": true
      }
    ],
    // lines-around-comment - enforces empty lines around comments (off by default)
    // не работает
    // "lines-around-comment": [2, { "beforeBlockComment": true, "beforeLineComment": true, "afterBlockComment": true, "afterLineComment": true }],
    // linebreak-style - disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
    // max-nested-callbacks - specify the maximum depth callbacks can be nested (off by default)
    // new-cap - require a capital letter for constructors
    // new-parens - disallow the omission of parentheses when invoking a constructor with no arguments
    // newline-after-var - allow/disallow an empty newline after var statement (off by default)
    "newline-after-var": 0,
    // no-array-constructor - disallow use of the Array constructor
    // no-continue - disallow use of the continue statement (off by default)
    "no-continue": 2,
    // no-inline-comments - disallow comments inline after code (off by default)
    "no-inline-comments": 2,
    // no-lonely-if - disallow if as the only statement in an else block (off by default)
    "no-lonely-if": 2,
    // no-mixed-spaces-and-tabs - disallow mixed spaces and tabs for indentation
    "no-mixed-spaces-and-tabs": 2,
    // no-multiple-empty-lines - disallow multiple empty lines (off by default)
    // no-nested-ternary - disallow nested ternary expressions (off by default)
    // no-new-object - disallow use of the Object constructor
    // no-space-before-semi - (deprecated) disallow space before semicolon (off by default)
    // no-spaced-func - disallow space between function identifier and application
    // no-ternary - disallow the use of ternary operators (off by default)
    // no-trailing-spaces - disallow trailing whitespace at the end of lines
    "no-trailing-spaces": [
      2,
      {
        "skipBlankLines": true
      }
    ],
    // no-underscore-dangle - disallow dangling underscores in identifiers
    "no-underscore-dangle": 0,
    // no-unneeded-ternary - disallow the use of Boolean literals in conditional expressions (off by default)
    // no-wrap-func - disallow wrapping of non-IIFE statements in parens
    //"no-wrap-func": 2,
    // object-curly-spacing - require or disallow padding inside curly braces (off by default)
    // не работает
    // "object-curly-spacing": [2, "never"],
    // one-var - allow or disallow one variable declaration per function (off by default)
    "one-var": [
      2,
      "never"
    ],
    // operator-assignment - require assignment operator shorthand where possible or prohibit it entirely (off by default)
    // operator-linebreak - enforce operators to be placed before or after line breaks (off by default)
    "operator-linebreak": [
      2,
      "after"
    ],
    // padded-blocks - enforce padding within blocks (off by default)
    // quote-props - require quotes around object literal property names (off by default)
    "quote-props": [
      2,
      "as-needed"
    ],
    // quotes - specify whether backticks, double or single quotes should be used
    "quotes": [
      1,
      "single",
      "avoid-escape"
    ],
    // semi-spacing - enforce spacing before and after semicolons
    "semi-spacing": [
      2,
      {
        "before": false,
        "after": true
      }
    ],
    // semi - require or disallow use of semicolons instead of ASI
    "semi": [
      2,
      "always"
    ],
    // sort-vars - sort variables within the same declaration block (off by default)
    // space-after-function-name - (deprecated) require a space after function names (off by default)
    // space-after-keywords - require a space after certain keywords (off by default)
    "space-after-keywords": 2,
    // space-before-blocks - require or disallow space before blocks (off by default)
    "space-before-blocks": [
      2,
      "always"
    ],
    // space-before-function-paren - require or disallow space before function opening parenthesis (off by default)
    "space-before-function-paren": [
      2,
      {
        "anonymous": "always",
        "named": "never"
      }
    ],
    // space-before-function-parentheses - (deprecated) require or disallow space before function parentheses (off by default)
    // space-in-brackets - require or disallow spaces inside brackets (off by default)
    //"space-in-brackets": [
    //  2,
    //  "never"
    //],
    // space-in-parens - require or disallow spaces inside parentheses (off by default)
    "space-in-parens": [
      2,
      "never"
    ],
    // space-infix-ops - require spaces around operators
    "space-infix-ops": 2,
    // space-return-throw-case - require a space after return, throw, and case
    "space-return-throw-case": 2,
    // space-unary-ops - Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "space-unary-ops": 2,
    // space-unary-word-ops - (deprecated) Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    // spaced-line-comment - require or disallow a space immediately following the // in a line comment (off by default)
    //"spaced-line-comment": 2,
    // wrap-regex - require regex literals to be wrapped in parentheses (off by default)
    "wrap-regex": 2,
    // ECMAScript 6
    // These rules are only relevant to ES6 environments and are off by default.

    // generator-star-spacing - enforce the spacing around the * in generator functions (off by default)
    "generator-star-spacing": [
      2,
      "after"
    ]
    // generator-star - (deprecated) enforce the position of the * in generator functions (off by default)
    // no-var - require let or const instead of var (off by default)
    // object-shorthand - require method and property shorthand syntax for object literals (off by default)

    // Legacy
    // The following rules are included for compatibility with JSHint and JSLint. While the names of the rules may not match up with the JSHint/JSLint counterpart, the functionality is the same.

    // max-depth - specify the maximum depth that blocks can be nested (off by default)
    // max-len - specify the maximum length of a line in your program (off by default)
    // "max-len": [2, 100, 4],
    // max-params - limits the number of parameters that can be used in the function declaration. (off by default)
    // "max-params": [2, 7],
    // max-statements - specify the maximum number of statement allowed in a function (off by default)
    // no-bitwise - disallow use of bitwise operators (off by default)
    // no-plusplus - disallow use of unary operators, ++ and -- (off by default)
  }
}
